/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./media/fapi.js":
/*!***********************!*\
  !*** ./media/fapi.js ***!
  \***********************/
/***/ (function() {

eval("(function () {\n// polyfill\n  if (!Element.prototype.matches) {\n    Element.prototype.matches =\n      Element.prototype.msMatchesSelector ||\n      Element.prototype.webkitMatchesSelector;\n  }\n\n  if (!Element.prototype.closest) {\n    Element.prototype.closest = function (s) {\n      var el = this;\n\n      do {\n        if (Element.prototype.matches.call(el, s)) return el;\n        el = el.parentElement || el.parentNode;\n      } while (el !== null && el.nodeType === 1);\n      return null;\n    };\n  }\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('.levels .remove')) {\n      let id = event.target.parentNode.getAttribute('data-id');\n      Swal.fire({\n        html: '<strong>Opravdu si přejete odstranit členskou sekci/úroveň?</strong><br><br>Smazáním sekce/úrovně nedojde ke smazání stránek v sekci/úrovni.',\n        showDenyButton: true,\n        confirmButtonText: `Smazat`,\n        denyButtonText: `Ponechat`,\n        customClass: {\n          confirmButton: 'removeConfirmButton',\n          denyButton: 'removeDenyButton',\n        }\n      }).then((result) => {\n        if (result.isConfirmed) {\n          let form = document.getElementById('LevelRemoveForm')\n          form.querySelector('[name=\"level_id\"]').setAttribute('value', id)\n          form.submit()\n        } else if (result.isDenied) {\n          // none\n        }\n      })\n    }\n  })\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('.levels .edit')) {\n      let name = event.target.parentNode.getAttribute('data-name');\n      let id = event.target.parentNode.getAttribute('data-id');\n      Swal.fire({\n        input: 'text',\n        inputLabel: 'Nový název',\n        inputValue: name,\n        showDenyButton: true,\n        confirmButtonText: `Přejmenovat`,\n        denyButtonText: `Ponechat`,\n        customClass: {\n          confirmButton: 'renameConfirmButton',\n          denyButton: 'renameDenyButton',\n        }\n\n      }).then((result) => {\n        if (result.isConfirmed) {\n          let form = document.getElementById('LevelEditForm')\n          form.querySelector('[name=\"level_id\"]').setAttribute('value', id)\n          form.querySelector('[name=\"name\"]').setAttribute('value', result.value)\n          form.submit()\n        } else if (result.isDenied) {\n          // none\n        }\n      })\n    }\n  })\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('form.pages button')) {\n      event.preventDefault()\n      let id = findSelectedLevel()\n      let form = event.target.closest('form');\n      form.querySelector('[name=\"level_id\"]').value = id\n      form.submit()\n    }\n  })\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('.oneEmail .carret') || event.target.matches('.oneEmail .header h3')) {\n      event.target.closest('.oneEmail').classList.toggle('open');\n    }\n  })\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('.specifyLevelEmailCheckbox')) {\n      let label = event.target.closest('.oneEmail').querySelector('.body > p')\n      let subj = event.target.closest('.oneEmail').querySelector('#mail_subject')\n      let body = event.target.closest('.oneEmail').querySelector('#mail_body')\n      let inputs = event.target.closest('.oneEmail').querySelector('.inputs')\n      if (event.target.checked) {\n        label.classList.add('hidden')\n        subj.removeAttribute('readonly')\n        body.removeAttribute('readonly')\n        inputs.classList.remove('collapsed')\n      } else {\n        label.classList.remove('hidden')\n        subj.value = ''\n        body.value = ''\n        subj.setAttribute('readonly', true)\n        body.setAttribute('readonly', true)\n        inputs.classList.add('collapsed')\n      }\n    }\n  })\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('.shortcodes h3') || event.target.matches('.shortcodes h3 .carret')) {\n      event.target.closest('.shortcodes').classList.toggle('open');\n    }\n  })\n\n  const changeSubSubMenuLinks = () => {\n    let lvl = findSelectedLevel()\n    Array.from(document.querySelectorAll('.subsubmenuitem')).forEach((one) => {\n      let url = one.getAttribute('href')\n      let lvlR = new RegExp('&level=');\n      if (lvlR.test(url)) {\n        one.setAttribute(\n          'href',\n          url.replace(/(&level=[0-9]*)/, `&level=${lvl}`)\n        )\n      } else {\n        one.setAttribute('href', `${url}&level=${lvl}`)\n      }\n    })\n  }\n\n  const levelToPages = (lvl) => {\n    if (!window.hasOwnProperty('LevelToPage')) {\n      let jsonEl = document.getElementById('LevelToPage');\n      if (jsonEl) {\n        window.LevelToPage = JSON.parse(jsonEl.innerText);\n      }\n    }\n    if (window.hasOwnProperty('LevelToPage')) {\n      return (window['LevelToPage'].hasOwnProperty(lvl)) ? window['LevelToPage'][lvl] : []\n    }\n    return []\n  }\n\n  const disableAddRemovePagesButton = () => {\n    let r = document.querySelector('.removePagesForm .danger');\n    if (r) {\n      r.disabled = true\n    }\n    let a = document.querySelector('.addPagesForm .btn')\n    if (a) {\n      a.disabled = true\n    }\n  }\n\n  const reenableAddRemovePagesButton = () => {\n    if (findSelectedLevel()) {\n      let r = document.querySelector('.removePagesForm .danger')\n      if (r && document.querySelector('.removePagesForm .onePage') !== null) {\n        r.disabled = false\n      }\n      let a = document.querySelector('.addPagesForm .btn')\n      if (a && document.querySelector('.addPagesForm .onePage') !== null) {\n        a.disabled = false\n      }\n    }\n  }\n\n  const reloadPagesToRemove = () => {\n\n    let removeList = document.querySelector('.removePagesForm');\n    if (!removeList) {\n      return\n    }\n    let pages = levelToPages(findSelectedLevel())\n    let tail = pages.reduce((a, one) => {\n      return a + '&include[]=' + one;\n    }, '');\n    let inner = removeList.querySelector('.inner');\n    inner.innerHTML = ''\n    if (pages.length <= 0) {\n      inner.insertAdjacentHTML('afterbegin', '<p>Sekce/úroveň nemá přiřazené stránky nebo přispěvky.</p>')\n      return\n    }\n    insertLoader(removeList)\n    fetch('/?rest_route=/wp/v2/pages&per_page=100&context=embed' + tail).then(res => res.json()).then(items => {\n      renderPagesForRemoval(inner, items)\n      removeLoader(removeList)\n      reenableAddRemovePagesButton()\n    });\n  }\n\n  const recheckPagesToAdd = () => {\n\n    let addList = document.querySelector('.addPagesForm');\n    if (!addList) {\n      return\n    }\n    let disable = levelToPages(findSelectedLevel())\n    Array.from(addList.querySelectorAll('input[type=\"checkbox\"]')).forEach((one) => {\n      let id = parseInt(one.value)\n      if (disable.indexOf(id) >= 0) {\n        one.disabled = true\n      } else {\n        one.disabled = false\n      }\n    })\n\n  }\n\n  const renderPagesForRemoval = (el, items) => {\n    let h = items.map((one) => {\n      return `<div class=\"onePage\"><input type=\"checkbox\" name=\"toRemove[]\" value=\"${one.id}\"> ${one.title.rendered}</div>`\n    })\n    el.innerHTML = ''\n    el.insertAdjacentHTML(\"beforeend\", h.join(''))\n    //el.insertAdjacentHTML(\"beforeend\", ``)\n\n  }\n\n  const findSelectedLevel = () => {\n    let sLi = document.querySelector('.levels li.selected')\n    if (sLi) {\n      return parseInt(sLi.getAttribute('data-id'))\n    } else {\n      return null\n    }\n  }\n\n  const insertLoader = (el) => {\n    el.classList.add('loading')\n  }\n\n  const removeLoader = (el) => {\n    el.classList.remove('loading')\n  }\n\n  const doHideMembershipUntil = () => {\n    let tables = document.querySelectorAll('.fapiMembership')\n    if (tables.length <= 0) {\n      return\n    }\n    Array.from(tables).forEach((table) => {\n      let unlimitedInputs = table.querySelectorAll('.isUnlimitedInput')\n      Array.from(unlimitedInputs).forEach((one) => {\n        let name = one.getAttribute('name')\n        let membershipDateName = name.replace('isUnlimited', 'membershipUntil')\n        let mu = table.querySelector('[name=\"' + membershipDateName + '\"]')\n        let muLabel = table.querySelector('[data-for=\"' + membershipDateName + '\"]')\n        if (one.checked) {\n          mu.classList.add('contentHidden')\n          muLabel.classList.add('contentHidden')\n        } else {\n          mu.classList.remove('contentHidden')\n          muLabel.classList.remove('contentHidden')\n        }\n\n      })\n    })\n  }\n\n  document.addEventListener('click', (event) => {\n    if (event.target.matches('.fapiMembership .isUnlimitedInput')) {\n      doHideMembershipUntil()\n    }\n  })\n\n// sets membership values to empty if checkbox is checked off\n  document.addEventListener('change', (event) => {\n    if (event.target.matches('.fapiMembership input[type=\"checkbox\"]')) {\n      if (event.target.checked === false) {\n        let name = event.target.name\n        if (/\\[check]/.test(name) === false) {\n          return\n        }\n        let m = /Levels\\[([0-9]*)]\\[check]/.exec(name);\n        let id = m[1]\n        document.querySelector(`[name=\"Levels[${id}][registrationDate]\"]`).value = ''\n        document.querySelector(`[name=\"Levels[${id}][registrationTime]\"]`).value = '00:00'\n        document.querySelector(`[name=\"Levels[${id}][membershipUntil]\"]`).value = ''\n        document.querySelector(`[name=\"Levels[${id}][isUnlimited]\"]`).checked = false\n      }\n    }\n  })\n\n  document.addEventListener('DOMContentLoaded', doHideMembershipUntil)\n\n  document.addEventListener('click', (event) => {\n    if (!(event.target.matches('.levels .up') || event.target.matches('.levels .down'))) {\n      return;\n    }\n\n    let direction = (event.target.matches('.levels .up')) ? 'up' : 'down';\n    let id = event.target.parentNode.getAttribute('data-id');\n    let form = document.getElementById('LevelOrderForm');\n    form.querySelector('[name=\"id\"]').setAttribute('value', id);\n    form.querySelector('[name=\"direction\"]').setAttribute('value', direction);\n    form.submit();\n  });\n\n  window.onload = function () {\n    new ClipboardJS('.copy-to-clipboard');\n  }\n\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    let collapseTriggers = document.getElementsByClassName(\"mainLevel\")\n    for (i = 0; i < collapseTriggers.length; i++) {\n      collapseTriggers[i].addEventListener(\"click\", function() {\n        let collapsibleContent = this.nextElementSibling;\n        if (!(collapsibleContent.style.maxHeight == \"0px\")){\n          collapsibleContent.style.maxHeight = \"0px\";\n        } else {\n          collapsibleContent.style.maxHeight = collapsibleContent.scrollHeight + \"px\";\n        } \n      });\n    }\n  })\n    \n})();\n\n\n//# sourceURL=webpack://fapi-member/./media/fapi.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./media/fapi.js"]();
/******/ 	
/******/ })()
;