/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/*!***********************!*\
  !*** ./media/fapi.js ***!
  \***********************/
eval("// polyfill\nif (!Element.prototype.matches) {\n    Element.prototype.matches =\n        Element.prototype.msMatchesSelector ||\n        Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n    Element.prototype.closest = function(s) {\n        var el = this;\n\n        do {\n            if (Element.prototype.matches.call(el, s)) return el;\n            el = el.parentElement || el.parentNode;\n        } while (el !== null && el.nodeType === 1);\n        return null;\n    };\n}\n\ndocument.addEventListener('click', (event) => {\n    if (event.target.matches('.levels .remove')) {\n        let id = event.target.parentNode.getAttribute('data-id');\n        Swal.fire({\n            html: '<strong>Opravdu si přejete odstranit členskou sekci/úroveň?</strong><br><br>Smazáním sekce/úrovně nedojde ke smazání stránek v sekci/úrovni.',\n            showDenyButton: true,\n            confirmButtonText: `Smazat`,\n            denyButtonText: `Ponechat`,\n            customClass: {\n                confirmButton: 'removeConfirmButton',\n                denyButton: 'removeDenyButton',\n            }\n        }).then((result) => {\n            if (result.isConfirmed) {\n                let form = document.getElementById('LevelRemoveForm')\n                form.querySelector('[name=\"level_id\"]').setAttribute('value', id)\n                form.submit()\n            } else if (result.isDenied) {\n                // none\n            }\n        })\n    }\n})\n\ndocument.addEventListener('click', (event) => {\n    if (event.target.matches('form.pages button')) {\n        event.preventDefault()\n        let id = findSelectedLevel()\n        let form = event.target.closest('form');\n        form.querySelector('[name=\"level_id\"]').value = id\n        form.submit()\n    }\n})\n\ndocument.addEventListener('click', (event) => {\n    if (event.target.matches('.levels a')) {\n        event.preventDefault()\n        let li = event.target.parentNode\n        Array.from(document.querySelectorAll('.levels li.selected')).forEach((one) => {\n            one.classList.remove('selected')\n        })\n        li.classList.add('selected')\n        reloadPagesToRemove()\n        recheckPagesToAdd()\n        reenableAddRemovePagesButton()\n        changeSubSubMenuLinks()\n    }\n})\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n\n    if (findSelectedLevel()) {\n        reloadPagesToRemove()\n    }\n    recheckPagesToAdd()\n    disableAddRemovePagesButton()\n    reenableAddRemovePagesButton()\n})\n\nconst changeSubSubMenuLinks = () => {\n    let lvl = findSelectedLevel()\n    Array.from(document.querySelectorAll('.subsubmenuitem')).forEach((one) => {\n        let url = one.getAttribute('href')\n        let lvlR = new RegExp('&level=');\n        if (lvlR.test(url)) {\n            one.setAttribute(\n                'href',\n                url.replace(/(&level=[0-9]*)/, `&level=${lvl}`)\n                )\n        } else {\n            one.setAttribute('href', `${url}&level=${lvl}`)\n        }\n    })\n}\n\nconst levelToPages = (lvl) => {\n    if (!window.hasOwnProperty('LevelToPage')) {\n        let jsonEl = document.getElementById('LevelToPage');\n        if (jsonEl) {\n            window.LevelToPage = JSON.parse(jsonEl.innerText);\n        }\n    }\n    if (window.hasOwnProperty('LevelToPage')) {\n        return (window['LevelToPage'].hasOwnProperty(lvl)) ? window['LevelToPage'][lvl] : []\n    }\n    return []\n}\n\nconst disableAddRemovePagesButton = () => {\n    let r = document.querySelector('.removePagesForm .danger');\n    if (r) {\n        r.disabled = true\n    }\n    let a = document.querySelector('.addPagesForm .btn')\n    if (a) {\n        a.disabled = true\n    }\n}\n\nconst reenableAddRemovePagesButton = () => {\n    if (findSelectedLevel()) {\n        let r = document.querySelector('.removePagesForm .danger')\n        if (r && document.querySelector('.removePagesForm .onePage') !== null) {\n            r.disabled = false\n        }\n        let a = document.querySelector('.addPagesForm .btn')\n        if (a && document.querySelector('.addPagesForm .onePage') !== null) {\n            a.disabled = false\n        }\n    }\n}\n\nconst reloadPagesToRemove = () => {\n\n    let removeList = document.querySelector('.removePagesForm');\n    if (!removeList) {\n        return\n    }\n    let pages = levelToPages(findSelectedLevel())\n    let tail = pages.reduce((a, one) => {\n        return a + '&include[]=' + one;\n    }, '');\n    let inner = removeList.querySelector('.inner');\n    inner.innerHTML = ''\n    if (pages.length <= 0) {\n        inner.insertAdjacentHTML('afterbegin','<p>Sekce/úroveň nemá přiřazené stránky.</p>')\n        return\n    }\n    insertLoader(removeList)\n    fetch('/?rest_route=/wp/v2/pages&per_page=100&context=embed' + tail).then(res => res.json()).then(items => {\n        renderPagesForRemoval(inner, items)\n        removeLoader(removeList)\n        reenableAddRemovePagesButton()\n    });\n}\n\nconst recheckPagesToAdd = () => {\n\n    let addList = document.querySelector('.addPagesForm');\n    if (!addList) {\n        return\n    }\n    let disable = levelToPages(findSelectedLevel())\n    Array.from(addList.querySelectorAll('input[type=\"checkbox\"]')).forEach((one) => {\n        let id = parseInt(one.value)\n        if (disable.indexOf(id) >= 0) {\n            one.readOnly = true\n        } else {\n            one.readOnly = false\n        }\n    })\n\n}\n\nconst renderPagesForRemoval = (el, items) => {\n    let h = items.map((one) => {\n        return `<div class=\"onePage\"><input type=\"checkbox\" name=\"toRemove[]\" value=\"${one.id}\"> ${one.title.rendered}</div>`\n    })\n    el.innerHTML = ''\n    el.insertAdjacentHTML(\"beforeend\", h.join(''))\n    //el.insertAdjacentHTML(\"beforeend\", ``)\n\n}\n\nconst findSelectedLevel = () => {\n    let sLi = document.querySelector('.levels li.selected')\n    if (sLi) {\n        return parseInt(sLi.getAttribute('data-id'))\n    } else {\n        return null\n    }\n}\n\nconst insertLoader = (el) => {\n    el.classList.add('loading')\n}\n\nconst removeLoader = (el) => {\n    el.classList.remove('loading')\n}\n\n//# sourceURL=webpack://fapi-member/./media/fapi.js?");
/******/ })()
;